type Query {
  product(id: String!): Product!
  products: [Product]!
}

type Mutation {
  createProduct(product: ProductInput!): Product!
  updateProduct(product: ProductInput!): Product!
  deleteProduct(id: ID!): Response!
}

type comboItem {
  details: Product
  quantity: Int!
}

input comboItemInput {
  id: ID!
  quantity: Int!
}

type compositionItem {
  details: BaseProduct
  quantity: Int!
}

input compositionItemInput {
  id: ID!
  quantity: Int!
}

type Product {
  id: ID!
  name: String!
  price: Float!
  costPrice: Float
  unit: Unit
  quantity: Int
  quantityPerSale: Int
  minQuantity: Int
  additionalPrice: Float
  expirationDate: Date
  photo: String

  """
  Products that compose this Product
  """
  combo: [comboItem!]!

  """
  BaseProducts that compose this Product
  """
  composition: [compositionItem!]!
}

input ProductInput {
  name: String!
  price: Float!
  costPrice: Float
  unit: Unit
  quantity: Int
  quantityPerSale: Int
  minQuantity: Int
  additionalPrice: Float
  expirationDate: Date
  photo: String

  """
  Products that compose this Product
  """
  combo: [comboItemInput!]! = []

  """
  BaseProducts that compose this Product
  """
  composition: [compositionItemInput!]! = []
}
